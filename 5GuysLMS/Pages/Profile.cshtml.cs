using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using _5GuysLMS.Data;
using _5GuysLMS.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace _5GuysLMS.Pages
{
    public class ProfileModel : PageModel
    {
        private readonly _5GuysLMSContext _context;

        [BindProperty] public User EditedUser { get; set; }
        [BindProperty] public IFormFile UploadedFile { get; set; }
        [BindProperty] public SecurityQuestionAnswer EditedSecurityQuestionAnswer1 { get; set; }
        [BindProperty] public SecurityQuestionAnswer EditedSecurityQuestionAnswer2 { get; set; }
        [BindProperty] public SecurityQuestionAnswer EditedSecurityQuestionAnswer3 { get; set; }
        [BindProperty] public int SecurityQuestionID1 { get; set; }
        [BindProperty] public int SecurityQuestionID2 { get; set; }
        [BindProperty] public int SecurityQuestionID3 { get; set; }
        public List<SelectListItem> SecurityQuestions { get; } = new List<SelectListItem> // Security questions and their corresponding ID (Value)
        {
            new SelectListItem { Value = "1", Text = "What is your oldest sibling’s middle name?" },
            new SelectListItem { Value = "2", Text = "What school did you attend for sixth grade?" },
            new SelectListItem { Value = "3", Text = "What was the name of your favorite childhood stuffed animal?"  },
            new SelectListItem { Value = "4", Text = "In what city or town was your first job?"  },
            new SelectListItem { Value = "5", Text = "What is the name of a college you applied to but did not attend?"  },
            new SelectListItem { Value = "6", Text = "What is your mother’s maiden name?"  },
            new SelectListItem { Value = "7", Text = "When you were young, what did you want to be when you grew up?"  },
            new SelectListItem { Value = "8", Text = "Where was the first family vacation you went on as a kid?"  },
            new SelectListItem { Value = "9", Text = "What was your least favorite food as a kid?"  },
            new SelectListItem { Value = "10", Text = "What was the first song you ever purchased?"  }
        };

        public ProfileModel(_5GuysLMSContext context)
        {
            _context = context;
        }
       
        public async Task<IActionResult> OnGetAsync()
        {
            //get our id out of our session
            int? id = HttpContext.Session.GetInt32("UserID");
            // if there wasn't a id in the session, return a 404
            if (id == null) {
                return NotFound();
            }
            //find our user, don't forget to include profile pictures, or it will default to null, since EF doesn't know about the autogenerated FK
           EditedUser = await _context.Users.
                Include(u=>u.ProfilePicture).
                Where(u=>u.Id == id).
                FirstOrDefaultAsync();

            //if the user doesn't have a profile picture assigned, find a default image( currently hard coded to id=9)
            if (EditedUser.ProfilePicture == null) {
                EditedUser.ProfilePicture = _context.ProfilePictures.Find(9);
            }
            //save our changes to the database
           await _context.SaveChangesAsync();
            return Page();
        }
       


        public async Task<IActionResult> OnPost()
        {   //Edited user's state isn't kept from the request. If it wasn't addressed in the html it's set to null. We also can't hide it client side for data security reasons. 
            //get our id out of our session
            int? id = HttpContext.Session.GetInt32("UserID");

            //get a fresh copy of our user from the database
            User QueriedUser = await _context.Users.FindAsync(id);

            // This code runs if the user was updating their security questions
            if (!(string.IsNullOrEmpty(EditedSecurityQuestionAnswer1.QuestionAnswer) || string.IsNullOrEmpty(EditedSecurityQuestionAnswer2.QuestionAnswer) || string.IsNullOrEmpty(EditedSecurityQuestionAnswer3.QuestionAnswer)))
            {
                EditedSecurityQuestionAnswer1.User = QueriedUser;
                EditedSecurityQuestionAnswer2.User = QueriedUser;
                EditedSecurityQuestionAnswer3.User = QueriedUser;
                EditedSecurityQuestionAnswer1.SecurityQuestion = await _context.SecurityQuestions.FindAsync(SecurityQuestionID1);
                EditedSecurityQuestionAnswer2.SecurityQuestion = await _context.SecurityQuestions.FindAsync(SecurityQuestionID2);
                EditedSecurityQuestionAnswer3.SecurityQuestion = await _context.SecurityQuestions.FindAsync(SecurityQuestionID3);
                _context.Update(EditedSecurityQuestionAnswer1);
                _context.Update(EditedSecurityQuestionAnswer2);
                _context.Update(EditedSecurityQuestionAnswer3);
            }
            // This code runs if the user was updating their profile
            else
            {
                //update fields from form
                QueriedUser.FirstName = EditedUser.FirstName;
                QueriedUser.LastName = EditedUser.LastName;
                //form is bad at filling our birthday from the database, so we check if the form did the default, and only update it if it's the default form
                if (EditedUser.Birthday != System.DateTime.MinValue)
                {
                    QueriedUser.Birthday = EditedUser.Birthday;
                }
                QueriedUser.AddressLineOne = EditedUser.AddressLineOne;
                QueriedUser.AddressLineTwo = EditedUser.AddressLineTwo;
                QueriedUser.City = EditedUser.City;
                QueriedUser.State = EditedUser.State;
                QueriedUser.Zip = EditedUser.Zip;
                QueriedUser.Phone = EditedUser.Phone;
                QueriedUser.Bio = EditedUser.Bio;
                QueriedUser.LinkOne = EditedUser.LinkOne;
                QueriedUser.LinkTwo = EditedUser.LinkTwo;
                QueriedUser.LinkThree = EditedUser.LinkThree;
                //picture isn't injected here, so we check if a file was uploaded, and set it if one has been uploaded 
                if (UploadedFile != null)
                {
                    QueriedUser.ProfilePicture = SaveUploadedPicture();
                }
                //update our user
                _context.Users.Update(QueriedUser);
            }
            //save changes to database
            await _context.SaveChangesAsync();

            //return to page
            return RedirectToPage("/Profile");
        }
        /// <summary>
        /// Saves A picture to the database, and returns it for linking to the User table. 
        /// </summary>
        /// <returns></returns>
        public ProfilePicture SaveUploadedPicture() {
            ProfilePicture profilePicture = new ProfilePicture();
            // set image title
            profilePicture.ImageTitle = UploadedFile.FileName;
            // get file extension
            string extension = Path.GetExtension(UploadedFile.FileName);
            //save to model
            profilePicture.FileExtension = extension;
            //use system.io to copy file contents to array for database
            MemoryStream ms = new();
            UploadedFile.CopyTo(ms);
            //save array to model
            profilePicture.ImageData = ms.ToArray();
            //release stream
            ms.Close();
            ms.Dispose();

            //add profile picture to database
            _context.ProfilePictures.Add(profilePicture);
            _context.SaveChanges();
            //get profile picture with new id to attach to user table
            ProfilePicture retrievedPicture = _context.ProfilePictures.
                Where(p => p.ImageData == profilePicture.ImageData 
                && p.ImageTitle == profilePicture.ImageTitle).
                FirstOrDefault();

            return retrievedPicture;
        }

        // This method handles when the user clicks the red X on one of the notifications
        public async Task<IActionResult> OnGetRedX(int notificationID, string type)
        {
            if (type == "created")
            {
                List<Models.CreatedNotification> cns = HttpContext.Session.GetComplexData<List<Models.CreatedNotification>>("CreatedNotifications");
                Models.CreatedNotification queriedCreatedNotification = cns.SingleOrDefault(cn => cn.Id == notificationID);
                if (queriedCreatedNotification != default) cns.Remove(queriedCreatedNotification);
                HttpContext.Session.SetComplexData("CreatedNotifications", cns);
            }
            else if (type == "graded")
            {
                List<Models.GradedNotification> gns = HttpContext.Session.GetComplexData<List<Models.GradedNotification>>("GradedNotifications");
                Models.GradedNotification queriedGradedNotification = gns.SingleOrDefault(gn => gn.Id == notificationID);
                if (queriedGradedNotification != default) gns.Remove(queriedGradedNotification);
                HttpContext.Session.SetComplexData("GradedNotifications", gns);
            }
            return await OnGetAsync(); // Asynchronously return the OnGetAsync method
        }
    }
}
